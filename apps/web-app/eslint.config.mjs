// Import Node.js utilities to work with file paths and URLs
import { dirname } from "path"
import { fileURLToPath } from "url"

// Import FlatCompat, a helper for using legacy ESLint shareable configs/plugins
// inside the new "flat config" system (eslint.config.js/mjs).
import { FlatCompat } from "@eslint/eslintrc"

// --- Resolve current file's directory (needed for FlatCompat) ---

// `import.meta.url` gives you the full URL to the current module file
// (e.g., "file:///Users/you/project/eslint.config.mjs").
// `fileURLToPath` converts that URL into a normal filesystem path.
const __filename = fileURLToPath(import.meta.url)

// Then we get the directory path containing this file.
// Equivalent of CommonJS's `__dirname`.
const __dirname = dirname(__filename)

// --- Set up FlatCompat ---

// FlatCompat is a bridge tool provided by ESLint.
// It allows us to reuse existing `.eslintrc`-style configurations,
// such as "next/core-web-vitals", inside the new flat config format.
//
// Without FlatCompat, these configs wouldn’t be directly usable because
// flat configs and legacy configs are structurally different.
const compat = new FlatCompat({
  // baseDirectory tells FlatCompat where to resolve plugins/configs from.
  // Here it’s the directory containing our eslint.config.mjs file.
  baseDirectory: __dirname,
})

// --- Define the ESLint configuration ---

const eslintConfig = [
  // 1. Spread in the rules/settings from Next.js’s recommended configs:
  //    - "next/core-web-vitals": Enforces best practices for Core Web Vitals
  //      (like avoiding large layout shifts or blocking resources).
  //    - "next/typescript": Adds TypeScript-aware linting rules for Next.js projects.
  //
  // FlatCompat converts these legacy-style "extends" strings into flat config objects.
  ...compat.extends("next/core-web-vitals", "next/typescript"),

  // 2. Add a flat config object that tells ESLint which files to ignore.
  {
    ignores: [
      "node_modules/**", // Always ignore dependencies
      ".next/**", // Next.js build output
      "out/**", // Static export build output
      "build/**", // Custom build directory (if used)
      "next-env.d.ts", // TypeScript environment declarations generated by Next.js
    ],
  },
]

// --- Export the config so ESLint can load it ---
export default eslintConfig
